name: Just for testing
on:
  release:
    types: [published]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Check if test
        if: ${{ startswith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-test') }}
        run: echo "ENV_DEPLOY=TEST" >> $GITHUB_ENV

      - name: Check if PROD
        if: ${{ startsWith(github.ref, 'refs/tags/v') && !endsWith(github.ref, '-test')}}
        run: echo "ENV_DEPLOY=PROD" >> $GITHUB_ENV

      - name: Check if on-demand
        if: ${{ startsWith(github.ref, 'refs/heads') }}
        run: echo "ENV_DEPLOY=ON-DEMAND" >> $GITHUB_ENV

      - name: Print environment
        run: echo "Environment is $ENV_DEPLOY"

      - name: Print ref
        run: echo "Ref is ${{ github.ref }}"

      - name: Get version number
        run: |
          REF="${{ github.ref }}"
          strip_of_start="refs/heads/"
          strip_of_ending="-actions"
          VERSION="${REF//$strip_of_start/''}"
          VERSION="${VERSION//$strip_of_ending/''}"
          echo "VERSION_NUMBER=$VERSION" >> $GITHUB_ENV

      # - name: Get version number
      #   run: |
      #     REF="${{ github.ref }}"
      #     prefix="refs/heads/"
      #     suffix="-actions"
      #     VERSION="${REF//'refs/heads/'/''}"
      #     VERSION="${VERSION//'-actions'/''}"
      #     echo "VERSION_NUMBER=$VERSION" >> $GITHUB_ENV

      # - name: Get version number
      #   run: |
      #     REF="${{ github.ref }}"
      #     prefix='refs/heads/'
      #     suffix='-actions'
      #     VERSION="${REF//prefix/''}"
      #     VERSION="${VERSION//suffix/''}"
      #     echo "VERSION_NUMBER=$VERSION" >> $GITHUB_ENV

      # - name: Get version number
      #   run: |
      #     REF="${{ github.ref }}"
      #     repl="refs/heads/"
      #     VERSION="${REF//repl/''}"
      #     echo "VERSION_NUMBER=$VERSION" >> $GITHUB_ENV

      - name: Print version number
        run: echo "Version number is $VERSION_NUMBER"

      # - name: Get tag
      #   env:
      #     TAG: "refs/tags/v1.0.0-test"   # "${{github.ref}}"
      #   run: echo "TAG=$TAG" >> $GITHUB_ENV

      # - name: Get version number
      #   id: version_number
      #   run: echo "::set-output "

      # - name: Print version
      #   # env:
      #   #   version: $TAG
      #   run: |
      #     echo "Tag is $TAG"




  # set-env:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     DEPLOY_ENV: ${{ steps.get-env.outputs.ENV }}

  #   steps:
  #     - name: Set default env
  #       env:
  #         ENV_DEFAULT: "test"
  #       run: echo "ENV=$ENV_DEFAULT" >> $GITHUB_ENV

  #     - name: Check if on-demand
  #       if: ${{ (github.event_name == 'workflow_dispatch') }}
  #       env:
  #         ENV_UPDATE: "test"
  #       run: echo "ENV=$ENV_UPDATE" >> $GITHUB_ENV

  #     - id: get-env
  #       run: echo "::set-output name=ENV::$ENV"

  # # set-version:
  # #   runs-on: ubuntu-latest
  # #   outputs:
  # #     VERSION_NUMBER: ${{ steps.get-version.outputs.VERSION }}

  # #   steps:
  # #     - name: Set default version number
  # #       env:
  # #         VERSION_DEFAULT: "${{ github.sha }}"
  # #       run: echo "VERSION=$VERSION_DEFAULT" >> $GITHUB_ENV

  # #     - name: Check if tag

  # print-github:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Dump GitHub context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJSON(github) }}
  #       run: echo "$GITHUB_CONTEXT"

  # # set-deploy-params:
  # #   runs-on: ubuntu-latest
  # #   outputs:
  # #     PYPI_TOKEN: ${{ steps.get-url.outputs.TOKEN }}
  # #     PYPI_URL: ${{ steps.get-url.outputs.URL }}

  # kladd:
  #   needs: set-env
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Print Environment
  #       env:
  #         ENVIRON: ${{ needs.set-env.outputs.DEPLOY_ENV }}
  #       run: echo "Environment set to $ENVIRON"


  # deploy-kladd:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Publish package
  #       if: (github.event_name == 'publish') && startsWith(gitub.ref, 'refs/tags')
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_TEST_API_KEY }}
  #         repository_url: https://test.pypi.org/legacy/


  # # deploy:
  # #   needs: set-env
  # #   runs-on: ubuntu-latest

  # #   steps:
  # #     - uses: actions/checkout@v2

  # #     - name: Set up Python 3.8
  # #       uses: actions/setup-python@v2
  # #       with:
  # #         python-version: 3.8

  # #     - name: Install dependencies
  # #       run: |
  # #         python -m pip install pip
  # #         python -m pip install build

  # #     - name: Get version number
  # #       id: version_number
  # #       run: |
  # #         $REF="${{github.ref}}"
  # #         $TAG=$REF.Replace("refs/tags/", "")
  # #         echo "::set-output name=TAG::$TAG"

  # #     - name: Build package
  # #       run: python -m build --sdist --wheel --outdir dist/

  # #     - name: Publish package to TestPyPi
  # #       uses: pypa/gh-action-pypi-publish@release/v1
  # #       with:
  # #         user: __token__
  # #         password: ${{ secrets.PYPI_TEST_API_KEY }}
  # #         repository_url: https://test.pypi.org/legacy/






  # # job1:
  # #   # If ref is not a tag, set 'test'
  # #   if: ${{ startsWith(github.ref, 'refs/heads/') }}
  # #   runs-on: ubuntu-latest
  # #   outputs:
  # #     VERSION: ${{ steps.set-version.outputs.TAG }}

  # #   steps:
  # #     - id: set-version
  # #       env:
  # #         TAG: "${{github.sha}}"
  # #       run: echo "::set-output name=TAG::$TAG"

  # # deploy:
  # #   needs: job1
  # #   runs-on: ubuntu-latest

  # #   steps:
  # #     - name: Print something
  # #       run: echo "This is the CD workflow."

  # #     - name: Print tag
  # #       env:
  # #         VERSION: ${{ needs.job1.outputs.VERSION }}
  # #       run: echo "Version set to $VERSION"

  # #     - name: Check reference
  # #       env:
  # #         REF: "${{github.ref}}"
  # #       run: echo "Ref is $REF"

  # #     - name: Dump GitHub context
  # #       env:
  # #         GITHUB_CONTEXT: ${{ toJSON(github) }}
  # #       run: echo "$GITHUB_CONTEXT"